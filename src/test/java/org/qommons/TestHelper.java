package org.qommons;

import java.io.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.qommons.debug.Debug;
import org.qommons.io.Format;

/**
 * <p>
 * This class may be used by test classes to generate pseudo-random numbers that would be used to generate pseudo-random test cases. These
 * test class would attempt to use the randomness to cover every possible permutation of code invocation in order to test a system
 * more-or-less completely.
 * </p>
 *
 * <p>
 * For example, to test a stateful class with 3 methods, a(int arg), b(boolean arg), and c(double arg), the class could do something like
 *
 * <pre>
 * (TestHelper helper) -> {
 * 	ToTest test = new ToTest();
 * 	int tries = 5000;
 * 	for (int i = 0; i &lt; tries; i++) {
 * 		switch (helper.getInt(0, 3)) {
 * 		case 0:
 * 			int intArg = helper.getInt(-1, 1000000); // Constrain to the expected argument range of method a()
 * 			assertOutputOfACorrect(intArg, a(intArg));
 * 			break;
 * 		case 1:
 * 			boolean boolArg = helper.getBoolean();
 * 			assertOutputOfBCorrect(boolArg, b(boolArg));
 * 			break;
 * 		case 2:
 * 			double doubleArg = helper.getDouble();
 * 			assertOutputOfCCorrect(doubleArg, C(doubleArg));
 * 			break;
 * 		}
 * 	}
 * }
 * </pre>
 *
 * This would generate 5000 random states in the tested class for each test case.
 * </p>
 * <p>
 * Far more than just a utility wrapper around {@link Random}, this class may be used to generate unlimited test cases that can be run
 * ad-infinitum. It keeps track of the history of each test case. It has several modes:
 * <ul>
 * <li><b>--random</b> In this mode, random test cases are generated and failures are logged for later reproduction. Options::
 * <ul>
 * <li><b>--max-cases=&lt;integer&gt;</b> The maximum number of test cases to run.</li>
 * <li><b>--max-time=&lt;duration&gt;</b> The maximum amount of time to run.</li>
 * <li><b>--max-failures=&lt;integer&gt;</b> The maximum number of failures to encounter.</li>
 * <li><b>--only-new=&lt;boolean&gt;</b> If true, this class will not re-attempt test cases that were last known to be broken. Default is
 * true.</li>
 * </ul>
 * </li>
 * <li><b>--reproduce</b> In this mode, tests that have broken recently are re-run. Options:
 * <ul>
 * <li><b>--debug</b> If this flag is set, the helper will invoke a break point (via {@link org.qommons.BreakpointHere}) just before the
 * most recent point of failure for each test.</li>
 * <li><b>--hash=&lt;debug-hash&gt;</b> The hash or comma-separated hashes to re-execute. If unspecified, all test cases that were last
 * known to be broken will be run.</li>
 * <li><b>--debug-at=&lt;long integer&gt;</b> The number of bytes in the test case at which to catch a breakpoint. Must be used with -hash
 * for a single hash.</li>
 * </ul>
 * </li>
 * </ul>
 * All modes have the following options:
 * <ul>
 * <li><b>--test-class=&lt;qualified.className&gt;</b> The {@link Testable} class to test. Must have a no-argument constructor.</li>
 * <li><b>--hold-time=&lt;duration&gt;</b> The maximum time to wait between invocations to this helper (if unspecified by execution) before
 * failure is assumed.</li>
 * </ul>
 * </p>
 * <p>
 * The console output of this class can be used to monitor the progress of the test. When each test case is started, the hash for that test
 * is printed immediately. When the test case finishes successfully, SUCCESS is printed, followed by the percent success for the current
 * testing session. Upon failure, FAILURE or TIMEOUT is printed, followed by "@" and the number of bytes generated by the helper for the
 * test case before its failure. This may be used (in conjunction with the -hash argument) in -reproduce mode with the -debug-at argument to
 * invoke a break point just prior to the failure. Then the stack trace of the exception or of the execution upon timeout is printed.
 * </p>
 */
public class TestHelper {
	public static interface Testable extends Consumer<TestHelper> {}

	public static class TestFailure {
		public final long seed;
		public final long bytes;
		public final NavigableMap<String, Long> placemarks;

		public TestFailure(long seed, long bytes, NavigableMap<String, Long> placemarks) {
			this.seed = seed;
			this.bytes = bytes;
			TreeMap<String, Long> ps = new TreeMap<>();
			placemarks.entrySet().stream().filter(e -> e.getValue() != null && e.getValue() >= 0)
				.forEach(e -> ps.put(e.getKey(), e.getValue()));
			this.placemarks = Collections.unmodifiableNavigableMap(ps);
		}

		public NavigableSet<Long> getBreakpoints() {
			if (placemarks.isEmpty() && bytes > 0)
				return new TreeSet<>(Arrays.asList(bytes));
			else
				return new TreeSet<>(placemarks.values());
		}

		@Override
		public boolean equals(Object obj) {
			if (!(obj instanceof TestFailure))
				return false;
			TestFailure other = (TestFailure) obj;
			return seed == other.seed && bytes == other.bytes && placemarks.equals(other.placemarks);
		}

		@Override
		public String toString() {
			StringBuilder s = new StringBuilder();
			s.append(Long.toHexString(seed)).append('@').append(bytes);
			for (Map.Entry<String, Long> entry : placemarks.entrySet())
				s.append(' ').append(entry.getKey()).append(": ").append(entry.getValue());
			return s.toString();
		}
	}

	private final boolean isReproducing;
	private final long theSeed;
	private final Random theRandomness;
	private long theBytes;
	private final NavigableSet<String> thePlacemarkNames;
	private final NavigableMap<String, Long> thePlacemarks;
	private final NavigableSet<Long> theBreakpoints;
	private long theNextBreak;
	private final boolean isCheckingIn;
	private volatile Instant theLastCheckIn;

	private TestHelper(Set<String> placemarkNames) {
		this(false, false, Double.doubleToLongBits(Math.random()), 0, Collections.emptyNavigableSet(), placemarkNames);
	}

	private TestHelper(boolean reproducing, boolean checkIn, long seed, long bytes, NavigableSet<Long> breakPoints,
		Set<String> placemarkNames) {
		isReproducing = reproducing;
		theSeed = seed;
		theRandomness = new Random(seed);
		while (theBytes < bytes - 7)
			getAnyLong();
		while (theBytes < bytes)
			getBoolean();
		TreeSet<String> pns = new TreeSet<>(placemarkNames);
		pns.add("Placemark");
		thePlacemarkNames = Collections.unmodifiableNavigableSet(pns);
		thePlacemarks = new TreeMap<>();
		theBreakpoints = Collections.unmodifiableNavigableSet(new TreeSet<>(breakPoints));
		theNextBreak = theBreakpoints.isEmpty() ? Long.MAX_VALUE : theBreakpoints.first();
		isCheckingIn = checkIn;
	}

	private void getBytes(int bytes) {
		theBytes += bytes;
		if (theBytes >= theNextBreak) {
			Debug.d().debug(this, true).setField("break", true);
			BreakpointHere.breakpoint();
			Long next = theBreakpoints.higher(theBytes);
			theNextBreak = next == null ? Long.MAX_VALUE : next;
		}
	}

	public boolean isReproducing() {
		return isReproducing;
	}

	public long getSeed() {
		return theSeed;
	}

	public long getPosition() {
		return theBytes;
	}

	public NavigableSet<String> getPlacemarkNames() {
		return thePlacemarkNames;
	}

	public long getLastPlacemark(String name) {
		Long placemark = thePlacemarks.get(name);
		return placemark == null ? -1 : placemark.longValue();
	}

	public TestHelper fork() {
		long forkSeed = getAnyLong();
		return new TestHelper(isReproducing, isCheckingIn, forkSeed, 0, theBreakpoints, thePlacemarkNames);
	}

	public void placemark() {
		placemark("Placemark");
	}

	public void placemark(String name) {
		if (!thePlacemarkNames.contains(name))
			throw new IllegalArgumentException("Unrecognized placemark name: " + name);
		if (isCheckingIn)
			theLastCheckIn = Instant.now();
		getBoolean();
		thePlacemarks.put(name, theBytes);
	}

	public Instant getLastCheckIn() {
		return theLastCheckIn;
	}

	public TestHelper tolerate(Duration timeout) {
		return this;
	}

	public int getAnyInt() {
		getBytes(4);
		return theRandomness.nextInt();
	}

	public int getInt(int min, int max) {
		if (min == max)
			return min;
		return min + Math.abs(getAnyInt() % (max - min));
	}

	public long getAnyLong() {
		getBytes(8);
		return theRandomness.nextLong();
	}

	public long getLong(long min, long max) {
		return min + Math.abs(getAnyLong() % (max - min));
	}

	public float getFloat() {
		getBytes(4);
		return theRandomness.nextFloat();
	}

	public float getAnyFloat() {
		return Float.intBitsToFloat(getAnyInt());
	}

	public float getFloat(float min, float max) {
		return min + getFloat() * (max - min);
	}

	public float getFloat(float min, float avg, float max) {
		if (avg <= min || avg >= max)
			throw new IllegalArgumentException("min=" + min + ", avg=" + avg + ", max=" + max);
		float random = getFloat();
		float skew = (avg - min) * 2 / (max - min);
		random = (float) Math.pow(random, 1 / skew);
		if (random <= 0.5)
			return min + random * (avg - min);
		else
			return avg + random * (max - avg);
	}

	public double getDouble() {
		getBytes(8);
		return theRandomness.nextDouble();
	}

	public double getGaussian() {
		getBytes(8);
		return theRandomness.nextGaussian();
	}

	public double getAnyDouble() {
		return Double.longBitsToDouble(getAnyLong());
	}

	public double getDouble(double min, double max) {
		return min + getDouble() * (max - min);
	}

	public double getDouble(double min, double avg, double max) {
		if (avg < min || avg > max)
			throw new IllegalArgumentException("min=" + min + ", avg=" + avg + ", max=" + max);
		double random = getDouble();
		double skew = (avg - min) * 2 / (max - min);
		random = Math.pow(random, 1 / skew);
		if (random <= 0.5)
			return min + random * (avg - min);
		else
			return avg + random * (max - avg);
	}

	public boolean getBoolean() {
		getBytes(1);
		byte[] bytes = new byte[1];
		theRandomness.nextBytes(bytes);
		return bytes[0] >= 0;
	}

	public boolean getBoolean(double odds) {
		return getDouble() < odds;
	}

	public RandomAction createAction() {
		return new RandomAction(this);
	}

	public RandomAction doAction(double relativeProability, Runnable action) {
		return createAction().or(relativeProability, action);
	}

	public <T> RandomSupplier<T> createSupplier() {
		return new RandomSupplier<>(this);
	}

	public <T> RandomSupplier<T> supply(double relativeProbability, Supplier<? extends T> action) {
		return this.<T> createSupplier().or(relativeProbability, action);
	}

	static abstract class RandomExecutor<T, A> {
		private final TestHelper theHelper;
		private final TreeMap<Double, A> theActions = new TreeMap<>();
		private double theTotalProbability;

		private RandomExecutor(TestHelper helper) {
			theHelper = helper;
		}

		public TestHelper getHelper() {
			return theHelper;
		}

		protected RandomExecutor<T, A> or(double relativeProbability, A action) {
			if (relativeProbability <= 0 || Double.isNaN(relativeProbability) || Double.isInfinite(relativeProbability))
				throw new IllegalArgumentException("Illegal probability: " + relativeProbability);
			theActions.put(theTotalProbability, action);
			theTotalProbability += relativeProbability;
			return this;
		}

		protected A getAction(String placemark) {
			double random = theHelper.getDouble();
			random *= theTotalProbability;
			A action = theActions.floorEntry(random).getValue();
			if (placemark != null)
				theHelper.placemark(placemark);
			return action;
		}
	}

	public static class RandomSupplier<T> extends RandomExecutor<T, Supplier<? extends T>> {
		private RandomSupplier(TestHelper helper) {
			super(helper);
		}

		@Override
		public RandomSupplier<T> or(double relativeProbability, Supplier<? extends T> action) {
			super.or(relativeProbability, action);
			return this;
		}

		public T get(String placemark) {
			return getAction(placemark)//
				.get();
		}
	}

	public static class RandomAction extends RandomExecutor<Void, Runnable> {
		private RandomAction(TestHelper helper) {
			super(helper);
		}

		@Override
		public RandomAction or(double relativeProbability, Runnable action) {
			super.or(relativeProbability, action);
			return this;
		}

		public void execute(String placemark) {
			getAction(placemark)//
				.run();
		}
	}

	public static class Testing {
		private final Class<? extends Testable> theTestable;
		private final Constructor<? extends Testable> theCreator;
		private boolean isRevisitingKnownFailures = true;
		private List<TestFailure> theSpecifiedCases = new ArrayList<>();
		private final NavigableSet<String> thePlacemarkNames;
		private boolean isDebugging = false;
		private int theMaxRandomCases = 0;
		private int theMaxFailures = 1;
		private Duration theMaxTotalDuration;
		private Duration theMaxCaseDuration;
		private Duration theMaxProgressInterval;
		private boolean isPrintingProgress = true;
		private boolean isPrintingFailures = true;
		private boolean isPersistingFailures = true;
		private File theFailureDir = null;
		private boolean isFailureFileQualified = true;

		private Testing(Class<? extends Testable> testable) {
			theTestable = testable;
			theCreator = getCreator(testable);
			thePlacemarkNames = new TreeSet<>();
		}

		public Testing revisitKnownFailures(boolean b) {
			isRevisitingKnownFailures = b;
			return this;
		}

		public Testing withDebug(boolean debug) {
			isDebugging = debug;
			return this;
		}

		public Testing withCase(long hash, NavigableMap<String, Long> placemarks) {
			theSpecifiedCases.add(new TestFailure(hash, 0, placemarks));
			return this;
		}

		public Testing withRandomCases(int cases) {
			theMaxRandomCases = cases;
			return this;
		}

		public Testing withMaxFailures(int failures) {
			theMaxFailures = failures;
			return this;
		}

		public Testing withMaxTotalDuration(Duration duration) {
			theMaxTotalDuration = duration;
			return this;
		}

		public Testing withMaxCaseDuration(Duration duration) {
			theMaxCaseDuration = duration;
			return this;
		}

		public Testing withMaxProgressInterval(Duration duration) {
			theMaxProgressInterval = duration;
			return this;
		}

		public Testing withPlacemarks(String... names) {
			for (String name : names)
				thePlacemarkNames.add(name);
			return this;
		}

		public Testing withPrinting(boolean onProgress, boolean onFailure) {
			isPrintingProgress = onProgress;
			isPrintingFailures = onFailure;
			return this;
		}

		public Testing withFailurePersistence(boolean persist) {
			isPersistingFailures = persist;
			return this;
		}

		public Testing withPersistenceDir(File dir, boolean qualifiedName) {
			if (dir != null)
				isPersistingFailures = true;
			theFailureDir = dir;
			isFailureFileQualified = qualifiedName;
			return this;
		}

		public TestSummary execute() throws AssertionError {
			int maxCases = theMaxRandomCases;
			int maxFailures = theMaxFailures;
			if (maxCases < 0)
				maxCases = Integer.MAX_VALUE;
			else if (maxCases == 0 && theMaxTotalDuration != null)
				maxCases = Integer.MAX_VALUE;
			if (maxFailures <= 0)
				maxFailures = Integer.MAX_VALUE;
			Instant termination = theMaxTotalDuration == null ? Instant.MAX : Instant.now().plus(theMaxTotalDuration);
			int failures = 0;
			int successes = 0;
			Throwable firstError = null;
			List<TestFailure> knownFailures;
			if (isRevisitingKnownFailures || isPersistingFailures)
				knownFailures = getKnownFailures(theFailureDir, theTestable, isFailureFileQualified, thePlacemarkNames);
			else
				knownFailures = null;
			try (TestSetExecution exec = new TestSetExecution(theCreator, isPrintingProgress, isPrintingFailures, Instant.now(),
				theMaxTotalDuration, theMaxCaseDuration, theMaxProgressInterval)) {
				if (isRevisitingKnownFailures) {
					if (!knownFailures.isEmpty()) {
						for (int i = 0; i < knownFailures.size() && failures < maxFailures
							&& Instant.now().compareTo(termination) < 0; i++) {
							TestFailure failure = knownFailures.get(i);
							TestHelper helper = new TestHelper(true, theMaxProgressInterval != null, failure.seed, 0,
								isDebugging ? failure.getBreakpoints() : Collections.emptyNavigableSet(), thePlacemarkNames);
							Throwable err = exec.executeTestCase(i + 1, helper, true);
							if (err != null) {
								TestFailure newFailure = new TestFailure(helper.getSeed(), helper.getPosition(), helper.thePlacemarks);
								if (!newFailure.equals(failure)) {
									if (newFailure.bytes != failure.bytes)
										System.err.println("Test failed "//
											+ (newFailure.bytes > failure.bytes ? "later" : "earlier") + " than before: " + newFailure.bytes
											+ " instead of " + failure.bytes);
									else
										System.err.println("Test failure reproduced");
									knownFailures.set(i, newFailure);
									if (isPersistingFailures)
										writeTestFailures(theFailureDir, theTestable, isFailureFileQualified, thePlacemarkNames,
											knownFailures);
								} else
									System.err.println("Test failure reproduced");
								if (firstError == null)
									firstError = err;
								failures++;
							} else {
								System.out.println("Test failure fixed");
								successes++;
								knownFailures.remove(i);
								i--;
								if (isPersistingFailures)
									writeTestFailures(theFailureDir, theTestable, isFailureFileQualified, thePlacemarkNames, knownFailures);
							}
						}
					}
				}
				int i = 0;
				for (TestFailure test : theSpecifiedCases) {
					TestHelper helper = new TestHelper(true, theMaxProgressInterval != null, test.seed, test.bytes, test.getBreakpoints(),
						test.placemarks.keySet());
					Throwable err = exec.executeTestCase(i + 1, helper, false);
					if (err != null) {
						if (isPersistingFailures) {
							TestFailure failure = new TestFailure(helper.getSeed(), helper.getPosition(), helper.thePlacemarks);
							knownFailures.add(failure);
							writeTestFailures(theFailureDir, theTestable, isFailureFileQualified, thePlacemarkNames, knownFailures);
						}
						if (firstError == null)
							firstError = err;
						failures++;
					} else
						successes++;
					i++;
				}
				for (; i < maxCases && failures < maxFailures && Instant.now().compareTo(termination) < 0; i++) {
					TestHelper helper = new TestHelper(false, theMaxProgressInterval != null, Double.doubleToLongBits(Math.random()), 0,
						Collections.emptyNavigableSet(), thePlacemarkNames);
					Throwable err = exec.executeTestCase(i + 1, helper, false);
					if (err != null) {
						if (isPersistingFailures) {
							TestFailure failure = new TestFailure(helper.getSeed(), helper.getPosition(), helper.thePlacemarks);
							knownFailures.add(failure);
							writeTestFailures(theFailureDir, theTestable, isFailureFileQualified, thePlacemarkNames, knownFailures);
						}
						if (firstError == null)
							firstError = err;
						failures++;
					} else
						successes++;
				}
				Duration testDuration = Duration.between(exec.getStart(), Instant.now());
				return new TestSummary(successes, failures, testDuration, firstError);
			}
		}
	}

	public static class TestSetExecution implements AutoCloseable {
		private final Constructor<? extends Testable> theCreator;
		private final boolean isPrintingProgress;
		private final boolean isPrintingFailures;
		private final Instant theOriginalStart;
		private final Duration theMaxTotalDuration;
		private final Duration theMaxCaseDuration;
		private final Duration theMaxProgressInterval;
		private final long theDebugHitCount;

		private final Thread theTestSetExecThread;
		private final Thread theTestExecThread;
		private Runnable theTestCase;
		private boolean isTestCaseDone;
		private Throwable theTestCaseError;
		private boolean isTestSetDone;

		TestSetExecution(Constructor<? extends Testable> creator, boolean isPrintingProgress, boolean isPrintingFailures,
			Instant originalStart, Duration maxTotalDuration, Duration maxCaseDuration, Duration maxProgressInterval) {
			theCreator = creator;
			this.isPrintingProgress = isPrintingProgress;
			this.isPrintingFailures = isPrintingFailures;
			theOriginalStart = originalStart;
			theMaxTotalDuration = maxTotalDuration;
			theMaxCaseDuration = maxCaseDuration;
			theMaxProgressInterval = maxProgressInterval;
			theDebugHitCount = BreakpointHere.getBreakpointCatchCount();

			theTestSetExecThread = Thread.currentThread();
			theTestExecThread = new Thread(() -> {
				while (!isTestSetDone) {
					Runnable testCase = theTestCase;
					if (testCase != null) {
						theTestCase = null;
						try {
							testCase.run();
						} catch (Throwable e) {
							theTestCaseError = e;
						}
						isTestCaseDone = true;
						theTestSetExecThread.interrupt();
					}
					try {
						Thread.sleep(1000000);
					} catch (InterruptedException e) {}
				}
			}, "Test Case Runner");
			theTestExecThread.start();
		}

		public Instant getStart() {
			return theOriginalStart;
		}

		public Throwable executeTestCase(int caseNumber, TestHelper helper, boolean reproduction) {
			Testable tester;
			try {
				tester = theCreator.newInstance();
			} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
				throw new IllegalStateException("Could not instantiate tester " + theCreator.getDeclaringClass().getName(), e);
			}
			return doTest(tester, caseNumber, helper, reproduction);
		}

		private Throwable doTest(Testable tester, int caseNumber, TestHelper helper, boolean reproduction) {
			String caseLabel = "";
			if (caseNumber > 0)
				caseLabel += "[" + caseNumber + "] ";
			caseLabel += Long.toHexString(helper.getSeed()).toUpperCase() + ": ";
			if (isPrintingProgress) {
				if (reproduction)
					System.out.print("Reproducing ");
				System.out.print(caseLabel);
				System.out.flush();
			}
			Instant caseStart = Instant.now();
			theTestCase = () -> {
				tester.accept(helper);
			};
			theTestExecThread.interrupt(); // Start test execution
			Instant totalMax = theMaxTotalDuration == null ? null : caseStart.plus(theMaxTotalDuration);
			Instant caseMax = theMaxCaseDuration == null ? null : caseStart.plus(theMaxCaseDuration);
			Instant checkInMax = theMaxProgressInterval == null ? null : caseStart.plus(theMaxProgressInterval);
			Instant checkInMin = theMaxProgressInterval == null ? null : caseStart;
			Duration sleep = Duration.ofDays(1);
			if (totalMax != null && caseStart.plus(sleep).compareTo(totalMax) > 0)
				sleep = Duration.between(caseStart, totalMax);
			if (caseMax != null && caseStart.plus(sleep).compareTo(caseMax) > 0)
				sleep = Duration.between(caseStart, caseMax);
			if (checkInMax != null && caseStart.plus(sleep).compareTo(checkInMax) > 0)
				sleep = Duration.between(caseStart, checkInMax);
			long caseDebugHitCount = BreakpointHere.getBreakpointCatchCount();
			boolean first = true;
			System.out.println("Started at " + caseStart);
			while (!isTestCaseDone) {
				long debugHits = BreakpointHere.getBreakpointCatchCount();
				if (first) {
					first = false;
				} else if (debugHits == caseDebugHitCount) {
					// Make sure the test case doesn't take longer than configured limits
					Instant now = Instant.now();
					if (caseMax != null && now.compareTo(caseMax) > 0) {
						theTestCaseError = new IllegalStateException("Timeout: Test case took longer than "
							+ QommonsUtils.printTimeLength(theMaxCaseDuration.getSeconds(), theMaxCaseDuration.getNano()));
						theTestCaseError.setStackTrace(theTestExecThread.getStackTrace());
						break;
					} else if (debugHits == theDebugHitCount && totalMax != null && now.compareTo(totalMax) > 0) {
						theTestCaseError = new IllegalStateException("Timeout: Test set took longer than "
							+ QommonsUtils.printTimeLength(theMaxTotalDuration.getSeconds(), theMaxTotalDuration.getNano()));
						theTestCaseError.setStackTrace(theTestExecThread.getStackTrace());
						break;
					} else if (checkInMax != null && now.compareTo(checkInMax) > 0) {
						Instant checkIn = helper.getLastCheckIn();
						if (checkIn == null || checkIn.compareTo(checkInMin) < 0) {
							theTestCaseError = new IllegalStateException("Timeout: No progress in longer than "
								+ QommonsUtils.printTimeLength(theMaxProgressInterval.getSeconds(), theMaxProgressInterval.getNano()));
							theTestCaseError.setStackTrace(theTestExecThread.getStackTrace());
							break;
						}
						checkInMax = checkIn.plus(theMaxProgressInterval);
						checkInMin = checkIn.plusNanos(1);
						sleep = Duration.between(now, checkInMax);
						if (totalMax != null && now.plus(sleep).compareTo(totalMax) > 0)
							sleep = Duration.between(now, totalMax);
						if (caseMax != null && now.plus(sleep).compareTo(caseMax) > 0)
							sleep = Duration.between(now, caseMax);
					}
				} else {
					System.out.println("Breakpoint detected--no more timeout checking for this case");
					sleep = Duration.ofDays(1);
				}
				try {
					Thread.sleep(sleep.toMillis(), sleep.getNano() % 1000000);
				} catch (InterruptedException e) {}
			}
			isTestCaseDone = false;
			Throwable e = theTestCaseError;
			theTestCaseError = null;
			if (e != null) {
				if (isPrintingProgress || isPrintingFailures) {
					Instant end = Instant.now();
					if (!isPrintingProgress)
						System.err.print(caseLabel);
					StringBuilder msg = new StringBuilder();
					msg.append("FAILURE@").append(helper.getPosition()).append(" in ");
					Format.DURATION.append(msg, Duration.between(caseStart, end));
					for (String pn : helper.getPlacemarkNames()) {
						long placemark = helper.getLastPlacemark(pn);
						if (placemark >= 0)
							msg.append("\n\t" + pn + "@").append(placemark);
					}
					System.err.println(msg);
					e.printStackTrace();
				}
				return e;
			}
			if (isPrintingProgress) {
				Instant end = Instant.now();
				StringBuilder msg = new StringBuilder().append("SUCCESS in ");
				Format.DURATION.append(msg, Duration.between(caseStart, end));
				if (caseNumber > 1) {
					msg.append(" (");
					Format.DURATION.append(msg, Duration.between(theOriginalStart, end));
					msg.append(" total)");
				}
				System.out.println(msg);
			}
			return null;
		}

		@SuppressWarnings("deprecation")
		@Override
		public void close() {
			isTestSetDone = true;
			theTestExecThread.interrupt();
			try {
				Thread.sleep(10); // Wait for the thread to die naturally if possible
			} catch (InterruptedException e) {}
			if (theTestExecThread.isAlive())
				theTestExecThread.stop();
		}
	}

	public static class TestSummary {
		private final int theSuccesses;
		private final int theFailures;
		private final Duration theDuration;
		private final Throwable theFirstError;

		public TestSummary(int successes, int failures, Duration duration, Throwable firstError) {
			theSuccesses = successes;
			theFailures = failures;
			theDuration = duration;
			theFirstError = firstError;
		}

		public int getSuccesses() {
			return theSuccesses;
		}

		public int getFailures() {
			return theFailures;
		}

		public Duration getDuration() {
			return theDuration;
		}

		public Throwable getFirstError() {
			return theFirstError;
		}

		public void throwErrorIfFailed() throws AssertionError {
			if (theFirstError instanceof AssertionError)
				throw (AssertionError) theFirstError;
			else if (theFirstError != null)
				throw new AssertionError(theFirstError.getMessage(), theFirstError);
		}

		@Override
		public String toString() {
			StringBuilder summary = new StringBuilder();
			if (theSuccesses > 0)
				summary.append(theSuccesses).append(" successful case").append(theSuccesses > 1 ? "s" : "");
			if (theFailures > 0) {
				if (theSuccesses > 0)
					summary.append(", ");
				summary.append(theFailures).append(" failed case").append(theFailures > 1 ? "s" : "");
			}
			if (theSuccesses == 0 && theFailures == 0)
				summary.append("No cases");
			summary.append(" in ");
			QommonsUtils.printTimeLength(theDuration.toMillis(), summary, false);
			return summary.toString();
		}
	}

	public static Testing createTester(Class<? extends Testable> testable) {
		return new Testing(testable);
	}

	private static List<TestFailure> getKnownFailures(File failureDir, Class<? extends Testable> testable, boolean qualifiedName,
		NavigableSet<String> placemarkNames) {
		File testFile = getFailureFile(failureDir, testable, qualifiedName, false);
		if (testFile == null || !testFile.exists())
			return new ArrayList<>();

		try (BufferedReader reader = new BufferedReader(new FileReader(testFile))) {
			List<TestFailure> failures = new ArrayList<>();
			// Read the header
			String line = reader.readLine();
			if (line == null)
				return failures;
			String[] split = line.split(",");
			List<String> filePlacemarks = new ArrayList<>(split.length - 2);
			for (int i = 2; i < split.length; i++)
				filePlacemarks.add(split[i]);
			line = reader.readLine();
			NavigableMap<String, Long> placemarks = new TreeMap<>();
			while (line != null) {
				placemarks.clear();
				String splitLine = line;
				int column = 0;
				int comma = splitLine.indexOf(',');
				while (comma >= 0) {
					split[column++] = splitLine.substring(0, comma);
					splitLine = splitLine.substring(comma + 1);
					comma = splitLine.indexOf(',');
				}
				split[column++] = splitLine;
				if (column != filePlacemarks.size() + 2)
					throw new IllegalStateException("Need " + (filePlacemarks.size() + 2) + " columns, not " + column);
				long seed = Long.parseLong(split[0], 16);
				long bytes = Long.parseLong(split[1]);
				for (int i = 2; i < split.length; i++) {
					if (split[i].length() == 0)
						continue;
					String pn = filePlacemarks.get(i - 2);
					if (placemarkNames.contains(pn)) {
						if (split[i].length() > 0)
							placemarks.put(pn, Long.parseLong(split[i]));
					}
				}
				failures.add(new TestFailure(seed, bytes, placemarks));
				line = reader.readLine();
			}
			return failures;
		} catch (IOException e) {
			e.printStackTrace();
			return new ArrayList<>();
		}
	}

	private static File getFailureFile(File failureDir, Class<? extends Testable> testable, boolean qualifiedName, boolean create) {
		File testFile = null;
		if (failureDir != null)
			return new File(failureDir, (qualifiedName ? testable.getName() : testable.getSimpleName()) + ".broken");

		// Attempt to co-locate the failure file with the class file
		String classFileName = testable.getName();
		classFileName = classFileName.replaceAll("\\.", "/") + ".class";
		URL classLoc = testable.getClassLoader().getResource(classFileName);
		if (classLoc != null && classLoc.getProtocol().equals("file")) {
			File classFile = new File(classLoc.getPath());
			testFile = new File(classFile.getParent(), testable.getSimpleName() + ".broken");
			if (testFile.exists())
				return testFile;
			try {
				if (testFile.createNewFile()) {
					if (!create)
						testFile.delete();
					return testFile;
				}
			} catch (IOException e) {
				System.err
					.println("Could not create failure file " + testFile.getAbsolutePath() + " for class " + testable.getName() + ": " + e);
			}
		}
		if (testFile == null) {
			File currentDir = new File(System.getProperty("user.dir"));
			testFile = new File(currentDir, testable.getName() + ".broken");
			if (testFile.exists())
				return testFile;
			try {
				if (testFile.createNewFile()) {
					if (!create)
						testFile.delete();
					return testFile;
				}
			} catch (IOException e) {
				System.err
					.println("Could not create failure file " + testFile.getAbsolutePath() + " for class " + testable.getName() + ": " + e);
			}
		}
		return testFile;
	}

	private static void writeTestFailures(File failureDir, Class<? extends Testable> testable, boolean qualifiedName,
		NavigableSet<String> placemarkNames, List<TestFailure> failures) {
		File testFile = getFailureFile(failureDir, testable, qualifiedName, true);
		if (testFile == null)
			return;
		try (BufferedWriter writer = new BufferedWriter(new java.io.FileWriter(testFile))) {
			writer.write("Seed,Position");
			for (String pn : placemarkNames)
				writer.write("," + pn);
			writer.write("\n");
			StringBuilder csvLine = new StringBuilder();
			for (TestFailure failure : failures) {
				csvLine.setLength(0);
				csvLine.append(Long.toHexString(failure.seed)).append(',').append(failure.bytes);
				for (String pn : placemarkNames) {
					csvLine.append(',');
					Long placemark = failure.placemarks.get(pn);
					if (placemark != null)
						csvLine.append(placemark);
				}
				writer.write((csvLine + "\n").toCharArray());
			}
		} catch (IOException e) {
			System.err.println("Could not write to failure file " + testFile.getAbsolutePath() + " for class " + testable.getName());
			e.printStackTrace();
		}
	}

	private static <T extends Testable> Constructor<T> getCreator(Class<T> testable) {
		Constructor<T> creator;
		try {
			try {
				creator = testable.getConstructor();
			} catch (NoSuchMethodException e) {
				creator = testable.getDeclaredConstructor();
			}
		} catch (NoSuchMethodException | SecurityException e) {
			throw new IllegalStateException("Test class " + testable.getName() + " does not have a no-argument constructor", e);
		}
		if (!creator.isAccessible()) {
			try {
				creator.setAccessible(true);
			} catch (SecurityException e) {
				throw new IllegalStateException(
					"No-argument constructor for test class " + testable.getName() + " is not accessible (try making it public)", e);
			}
		}
		return creator;
	}
}
